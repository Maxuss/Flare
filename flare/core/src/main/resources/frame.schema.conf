# Config parser version, defaults to latest version
version: optional string

meta {
  # Contains some metadata regarding the frame, optional
  "$type": optional object

  # ID of the frame, defaults to file name
  id: optional string

  # Default package for handler classes in Java.
  # So instead of writing, e.g. "my.package.subpackage.SomeHandler.method", you will be able to write:
  #   handler package: my.package.subpackage
  # And then define handlers as:
  #   handler: SomeHandler.method
  # Defaults to empty string
  handler package: optional string
}

layout {
  # Actual contents of the frame
  "$type": object

  # A string:
  #   1. <rows>x<columns>, e.g. 3x9, 6x9, 3x3
  #   2. <rows> by <columns>, e.g. 3 by 9, 6 by 9, 3 by 3
  # Defines the dimensions of the frame inventory
  dimensions: string

  # The inventory title
  # Supports lenient MiniMessage and PlaceholderAPI (if enabled)
  # Defaults to reformatted file name
  title: optional string

  # Generic click handler.
  # Value is java class and method for invokation, e.g. "my.package.subpackage.SomeHandler.method"
  # Defaults to null
  on click: optional string

  # Left click handler
  # Value is java class and method for invokation
  on left click: optional string

  # Right click handler
  # Value is java class and method for invokation
  on right click: optional string

  # Shift click click handler
  # Value is java class and method for invokation
  on shift from: optional string

  # Handler for when player shift clicks an item from their inventory
  # Value is java class and method for invokation
  on shift inside: optional string

  components {
    # Component placement happens here
    # Example:
    # components = [
    #   {
    #    type: placeholder
    #    item: empty
    #  }
    # ]
    "$type": array
  }

  grid {
    # EXPERIMENTAL FEATURE
    # Requires config parser version to be set to "experimental"
    # Note, that experimental features may change drastically on stable release
    "$type": optional object

    # The grid map. Example:
    # map: """
    #   BBBBBBBBB
    #   BABBCBBAB
    #   BB#BBB#BB
    # """
    # For frame of dimensions 3x9
    map: string

    definitions: {
      # Character definition. Each character maps to a component it defines. Like this:
      # <char> <component type> {
      #   <component definitions...>
      # }
      # Example:
      # B placeholder {
      #   item: empty
      # }
      "$type": map(string -> object)
    }
  }
}