# This pseudo-schema contains defintions for different components

shared {
  # Generic click handler.
  # Value is java class and method for invokation, e.g. "my.package.subpackage.SomeHandler.method"
  # If {meta.handler package} is specified, the package part may be omitted.
  click-handler: optional string

  # The space in which the component is positioned. There are multiple types:
  # 1. Slot (these all mean the same value):
  #   - row 1 slot 2
  #   - row one slot two
  #   - [0, 1] -> zero-based indices
  # 2. Set space: array of slots
  # 3. Rect:
  #   - {
  #       from: <slot>
  #       to: <slot>
  #     }
  #   - [<slot>, <slot>] - same, but more compact
  #   - from <slot (only as string)> to <slot (only as string)>
  space: string | object | array

  item: {
    # Item can be defined either as a material (e.g. red dye, red_dye, RED_DYE), or as a complex object
    # Special (magic) item values (not case sensitive):
    # - empty -> returns an empty item stack as specified in
    #   https://github.com/Maxuss/Flare/blob/3e8a923f14b6c0dcb2cb1ad60f9d042295ffffec/flare/core/src/main/java/space/maxus/flare/item/Items.java#L198-L202C8
    #   but with Material.DARK_GRAY_STAINED_GLASS_PANE
    "$type": object | string

    # The amount of items. Defaults to 0
    count: optional int

    # Whether to give decorative glint to item. Defaults to false
    glint: optional bool

    # Name of the item. Defaults to material-provided name.
    # Supports lenient MiniMessage and PlaceholderAPI (if present)
    name: optional string

    # The lore of the item. Defaults to empty
    # Lore will be partitioned into lines by itself, but it can also be split into chunks
    # with either the <br> tags, or newlines
    # If `lore` is an array, then no lines will be partitioned
    # Supports lenient MiniMessage and PlaceholderAPI (if present)
    # Example:
    # lore: """
    #   <gold> Hello!
    #   <green> World!
    # """
    # NOTE: The beginning will always be trimmed
    # Another example:
    # lore: [
    #   "<gold> Hello!",
    #   "<green> World!"
    # ]
    lore: optional string | array(string)

    # Specifies the ItemFlags to hide
    # Provided as enums, e.g. hide attributes, hide_attributes or HIDE_ATTRIBUTES
    # Use `all` (not case sensitive) to hide all flags
    hide flags: optional string | array(string)

    # Whether the item should be rebuilt each component render.
    # Set this to true if it uses any dynamic PlaceholderAPI components
    # Defaults to false
    dynamic: optional bool

    # More properties will most likely be added in future versions
  }
}

placeholder {
  # The item used for placeholder
  item: shared.item
  # Placeholders do not have any other properties
}

button {
  # The item used
  item: shared.item

  # Generic click handler
  on click: shared.click-handler
  # Right click handler
  on right click: shared.click-handler
  # Left click handler
  on left click: shared.click-handler
  # Shift-click handler
  on shift click: shared.click-handler
}

# TODO: finish more schemas